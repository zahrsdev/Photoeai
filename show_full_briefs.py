"""
Script untuk menampilkan full comprehensive brief yang dihasilkan sistem
"""

import asyncio
import sys
import os
from pathlib import Path

# Add the app directory to Python path
current_dir = Path(__file__).parent
app_dir = current_dir / "app"
sys.path.insert(0, str(app_dir))

from app.services.brief_orchestrator import BriefOrchestratorService
from app.schemas.models import InitialUserRequest
from app.routers.generator import _create_comprehensive_enhanced_brief

async def show_full_comprehensive_briefs():
    """Tampilkan full comprehensive brief dalam berbagai mode"""
    
    print("üìÑ FULL COMPREHENSIVE BRIEFS GENERATED BY SYSTEM")
    print("=" * 100)
    
    orchestrator = BriefOrchestratorService()
    
    # Original comprehensive prompt
    comprehensive_prompt = """Ultra-realistic commercial product photography of a banana and raisin flavored milk drink bottle splashing in creamy milk. The bottle is glossy with detailed branding, surrounded by floating fresh bananas, banana slices, and raisins frozen mid-air. Milk splash is dynamic, high-speed, and hyper-detailed with droplets suspended in motion. Background is a smooth golden-yellow gradient, enhancing freshness and energy. Studio lighting with soft reflections highlights the glossy surface of the bottle and realistic textures of fruits. Shot in high-resolution, cinematic style, with sharp focus, vibrant colors, and perfect clarity."""
    
    print("üî• MODE 1: ENHANCED COMPREHENSIVE BRIEF")
    print("=" * 100)
    print("üìù Input: User's comprehensive prompt")
    print("ü§ñ Process: Extract wizard data + Create enhanced brief")
    print("-" * 100)
    
    try:
        # Extract wizard data
        initial_request = InitialUserRequest(user_request=comprehensive_prompt)
        wizard_input = await orchestrator.extract_and_autofill(initial_request)
        
        # Create enhanced brief
        enhanced_brief = await _create_comprehensive_enhanced_brief(comprehensive_prompt, wizard_input)
        
        print(enhanced_brief)
        print(f"\nüìä Stats: {len(enhanced_brief)} characters, {len(enhanced_brief.split())} words")
        
    except Exception as e:
        print(f"‚ùå Enhanced brief generation failed: {e}")
    
    print("\n" + "=" * 100)
    print("ü§ñ MODE 2: STANDARD COMPREHENSIVE BRIEF (From Simple Prompt)")
    print("=" * 100)
    print("üìù Input: Simple prompt -> 'Banana milk drink'")
    print("ü§ñ Process: 46-field wizard extraction + Full brief generation")
    print("-" * 100)
    
    try:
        # Simple prompt
        simple_request = InitialUserRequest(user_request="Banana milk drink")
        wizard_input = await orchestrator.extract_and_autofill(simple_request)
        brief_result = await orchestrator.generate_final_brief(wizard_input)
        
        print(brief_result.final_prompt)
        print(f"\nüìä Stats: {len(brief_result.final_prompt)} characters, {len(brief_result.final_prompt.split())} words")
        
    except Exception as e:
        print(f"‚ùå Standard brief generation failed: {e}")
    
    print("\n" + "=" * 100)
    print("üîß MODE 3: FORCED COMPREHENSIVE BRIEF")
    print("=" * 100)
    print("üìù Input: User's comprehensive prompt (forced through wizard)")
    print("ü§ñ Process: Force comprehensive prompt through full 46-field wizard system")
    print("-" * 100)
    
    try:
        # Force comprehensive prompt through wizard
        force_request = InitialUserRequest(user_request=comprehensive_prompt)
        wizard_input = await orchestrator.extract_and_autofill(force_request)
        brief_result = await orchestrator.generate_final_brief(wizard_input)
        
        print(brief_result.final_prompt)
        print(f"\nüìä Stats: {len(brief_result.final_prompt)} characters, {len(brief_result.final_prompt.split())} words")
        
    except Exception as e:
        print(f"‚ùå Forced brief generation failed: {e}")

async def show_wizard_fields_extracted():
    """Tampilkan 46 wizard fields yang diekstrak dari comprehensive prompt"""
    
    print("\n" + "=" * 100)
    print("üéØ WIZARD FIELDS EXTRACTED FROM COMPREHENSIVE PROMPT")
    print("=" * 100)
    
    comprehensive_prompt = """Ultra-realistic commercial product photography of a banana and raisin flavored milk drink bottle splashing in creamy milk. The bottle is glossy with detailed branding, surrounded by floating fresh bananas, banana slices, and raisins frozen mid-air. Milk splash is dynamic, high-speed, and hyper-detailed with droplets suspended in motion. Background is a smooth golden-yellow gradient, enhancing freshness and energy. Studio lighting with soft reflections highlights the glossy surface of the bottle and realistic textures of fruits. Shot in high-resolution, cinematic style, with sharp focus, vibrant colors, and perfect clarity."""
    
    try:
        orchestrator = BriefOrchestratorService()
        initial_request = InitialUserRequest(user_request=comprehensive_prompt)
        wizard_input = await orchestrator.extract_and_autofill(initial_request)
        
        # Get all fields
        wizard_dict = wizard_input.model_dump()
        
        print("üìã ALL 46 WIZARD FIELDS:")
        print("-" * 50)
        
        filled_count = 0
        empty_count = 0
        
        for i, (field, value) in enumerate(wizard_dict.items(), 1):
            status = "‚úÖ" if value is not None and str(value).strip() else "‚ùå"
            display_value = str(value) if value is not None else "None"
            
            if value is not None and str(value).strip():
                filled_count += 1
            else:
                empty_count += 1
            
            print(f"{i:2d}. {status} {field:<25}: {display_value}")
        
        print("-" * 50)
        print(f"üìä SUMMARY:")
        print(f"‚úÖ Filled fields: {filled_count}/46 ({filled_count/46*100:.1f}%)")
        print(f"‚ùå Empty fields: {empty_count}/46 ({empty_count/46*100:.1f}%)")
        
    except Exception as e:
        print(f"‚ùå Wizard extraction failed: {e}")

if __name__ == "__main__":
    asyncio.run(show_full_comprehensive_briefs())
    asyncio.run(show_wizard_fields_extracted())
