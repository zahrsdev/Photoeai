#!/usr/bin/env python3
"""
Optimized PhotoeAI Watermelon Juice Test Script
This script demonstrates the complete workflow successfully
"""

import asyncio
import sys
import os
from datetime import datetime

# Add the app directory to Python path
sys.path.append(os.path.join(os.path.dirname(__file__), '.'))

from app.schemas.models import InitialUserRequest
from app.services.brief_orchestrator import BriefOrchestratorService

async def main():
    """Main workflow test function"""
    
    print("🍉 WATERMELON JUICE - PhotoeAI WORKFLOW TEST")
    print("=" * 80)
    
    # Initialize the service
    print("🔧 Initializing PhotoeAI BriefOrchestratorService...")
    orchestrator = BriefOrchestratorService()
    
    # User request
    user_request = InitialUserRequest(
        user_request="Create a vibrant tropical drink advertisement featuring a large watermelon juice bottle in the center. The bottle should appear big, glossy, and labeled 'WATERMELON JUICE – SUMMER FRESH.' Place a glass of watermelon juice beside it. Surround the bottle with watermelon slices, cubes, and whole mini watermelons floating around. Add a splash of red juice splattering around the bottle. The background should include a sunny tropical beach or palm trees, with blue sky and bright light rays. Include ice cubes, water droplets, and sparkles to give a fresh, lively effect."
    )
    
    print(f"\n📝 Processing: {user_request.user_request[:80]}...")
    
    try:
        # Step 1: Extract structured data
        print("\n🔍 STEP 1: Extracting structured photography data...")
        wizard_input = await orchestrator.extract_and_autofill(user_request)
        
        data = wizard_input.model_dump()
        print("✅ Extraction completed successfully!")
        print(f"📊 Extracted {len(data)} structured fields")
        
        # Step 2: Generate enhanced brief
        print("\n🎨 STEP 2: Generating enhanced photography brief...")
        brief_output = await orchestrator.generate_final_brief(wizard_input)
        
        print("✅ Enhanced brief generated successfully!")
        print(f"📝 Brief length: {len(brief_output.final_prompt)} characters")
        print(f"📊 Word count: ~{len(brief_output.final_prompt.split())} words")
        
        # Save the complete brief
        filename = "watermelon_juice_photography_brief_final.txt"
        timestamp = datetime.now().isoformat()
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("WATERMELON JUICE - PHOTOGRAPHY BRIEF\n")
            f.write("Generated by PhotoeAI Engine\n")
            f.write(f"Date: {timestamp}\n")
            f.write("=" * 80 + "\n\n")
            f.write(f"Original Request:\n{user_request.user_request}\n\n")
            f.write("=" * 80 + "\n\n")
            f.write(brief_output.final_prompt)
        
        print(f"💾 Complete brief saved to: {filename}")
        
        # Preview
        print("\n📋 BRIEF PREVIEW:")
        print("-" * 60)
        preview_lines = brief_output.final_prompt.split('\n')[:5]
        for line in preview_lines:
            print(line[:75] + ("..." if len(line) > 75 else ""))
        print("-" * 60)
        
        return True
        
    except Exception as e:
        print(f"❌ Error: {e}")
        import traceback
        traceback.print_exc()
        return False

def run_test():
    """Run the complete test workflow"""
    print("🚀 PhotoeAI System Test Starting...")
    success = asyncio.run(main())
    
    if success:
        print("\n🎉 WATERMELON JUICE WORKFLOW COMPLETED SUCCESSFULLY! 🎉")
        print("📄 Professional photography brief generated and saved")
        print("🔥 PhotoeAI dual-LLM architecture working perfectly!")
        print("✅ System ready for production use")
    else:
        print("\n💥 Test failed - check error details above")
    
    return success

if __name__ == "__main__":
    run_test()
