#!/usr/bin/env python3
"""
Test script for watermelon juice advertisement extraction
"""

import requests
import json

def test_watermelon_extraction():
    """Test the watermelon juice advertisement extraction"""
    
    # Test payload
    payload = {
        "user_request": "Create a vibrant tropical drink advertisement featuring a large watermelon juice bottle in the center. The bottle should appear big, glossy, and labeled \"WATERMELON JUICE – SUMMER FRESH.\" Place a glass of watermelon juice beside it. Surround the bottle with watermelon slices, cubes, and whole mini watermelons floating around. Add a splash of red juice splattering around the bottle. The background should include a sunny tropical beach or palm trees, with blue sky and bright light rays. Include ice cubes, water droplets, and sparkles to give a fresh, lively effect."
    }
    
    print("🍉 Testing Watermelon Juice Advertisement Extraction...")
    print("=" * 60)
    print(f"User Request: {payload['user_request'][:100]}...")
    print("=" * 60)
    
    try:
        # Test extraction endpoint
        print("\n🔍 Step 1: Testing extraction endpoint...")
        response = requests.post('http://localhost:8000/api/v1/extract-and-fill', json=payload)
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            extraction_data = response.json()
            print("✅ Extraction successful!")
            print(f"📊 Extracted fields: {len(extraction_data)} fields")
            
            # Show key extracted fields
            print("\n🎯 Key Extracted Fields:")
            for key, value in list(extraction_data.items())[:5]:
                print(f"  {key}: {value}")
            
            # Test final brief generation
            print("\n🎨 Step 2: Testing enhanced brief generation...")
            brief_response = requests.post('http://localhost:8000/api/v1/generate-final-brief', json=extraction_data)
            print(f"Brief Status Code: {brief_response.status_code}")
            
            if brief_response.status_code == 200:
                brief_data = brief_response.json()
                print("✅ Enhanced brief generation successful!")
                print(f"📝 Brief length: {len(brief_data['enhanced_brief'])} characters")
                print(f"📊 Word count: ~{len(brief_data['enhanced_brief'].split())} words")
                
                # Save the brief
                with open('watermelon_juice_photography_brief.txt', 'w', encoding='utf-8') as f:
                    f.write("WATERMELON JUICE - PHOTOGRAPHY BRIEF\n")
                    f.write("Generated by PhotoeAI Engine\n")
                    f.write(f"Date: {brief_data['timestamp']}\n")
                    f.write("=" * 80 + "\n\n")
                    f.write(f"Original Request:\n{payload['user_request']}\n\n")
                    f.write("=" * 80 + "\n\n")
                    f.write(brief_data['enhanced_brief'])
                
                print(f"💾 Brief saved to: watermelon_juice_photography_brief.txt")
                
                # Show preview
                print("\n📋 Brief Preview (first 300 characters):")
                print("-" * 50)
                print(brief_data['enhanced_brief'][:300] + "...")
                print("-" * 50)
                
                return True
                
            else:
                print(f"❌ Brief generation failed: {brief_response.text}")
                return False
        else:
            print(f"❌ Extraction failed: {response.text}")
            return False
            
    except Exception as e:
        print(f"❌ Error during testing: {e}")
        return False

if __name__ == "__main__":
    success = test_watermelon_extraction()
    if success:
        print("\n🎉 WATERMELON JUICE WORKFLOW TEST COMPLETED SUCCESSFULLY! 🎉")
    else:
        print("\n💥 Test failed - check server logs for details")
