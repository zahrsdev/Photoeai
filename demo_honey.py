"""
Direct test of PhotoeAI backend services without HTTP server
This demonstrates the complete workflow for the honey product
"""

import sys
import os
import asyncio

# Add the current directory to Python path
sys.path.insert(0, os.getcwd())

from app.schemas.models import InitialUserRequest, WizardInput
from app.services.brief_orchestrator import BriefOrchestratorService

async def test_honey_product():
    """Test the honey product through direct service calls"""
    
    # Your honey product request
    honey_request = InitialUserRequest(
        user_request="""Cinematic commercial of a honey product "Madu Ahlan Trigona". A natural rainforest background with sunlight rays shining through the trees, a waterfall in the distance, and glowing golden honeycombs floating around the bottle. Close-up of the honey bottle standing on a mossy rock, golden honey drops slowly dripping. Dynamic glowing particle effects emphasize freshness and health benefits. Camera smoothly rotates around the bottle with dramatic lighting and lens flare, highlighting the label text "Alami dan Berkhasiat". Transition into slow-motion honey pouring into a spoon with golden sparkles, then zoom out showing the product with tagline: "Madu Ahlan Trigona ‚Äì Alami, Murni, dan Berkhasiat". Elegant, high contrast, glossy, realistic 3D style, professional advertisement look."""
    )
    
    print("üçØ PHOTOEAI BACKEND - HONEY PRODUCT TEST")
    print("=" * 60)
    print(f"Input Request: {honey_request.user_request[:100]}...")
    print("=" * 60)
    
    # Initialize orchestrator
    orchestrator = BriefOrchestratorService()
    
    try:
        # Step 1: Extract and autofill wizard data
        print("\nüìã STEP 1: Extract and Autofill Wizard Data")
        print("-" * 50)
        print("ü§ñ Using LLM as Analyst to extract structured data...")
        
        wizard_input = await orchestrator.extract_and_autofill(honey_request)
        
        print("‚úÖ Successfully extracted and autofilled wizard data!")
        print(f"üìä Total fields: {len(wizard_input.model_dump())} fields processed")
        
        # Show key extracted fields
        key_fields = [
            ('product_name', 'Product Name'),
            ('environment', 'Environment'),
            ('lighting_style', 'Lighting Style'),
            ('shot_type', 'Shot Type'),
            ('mood', 'Mood'),
            ('camera_type', 'Camera Type'),
            ('lens_type', 'Lens Type'),
            ('overall_style', 'Overall Style'),
            ('dominant_colors', 'Dominant Colors'),
            ('visual_effect', 'Visual Effect')
        ]
        
        print("\nüîç Key Extracted Fields:")
        for field_key, field_name in key_fields:
            value = getattr(wizard_input, field_key, 'Not specified')
            print(f"  ‚Ä¢ {field_name}: {value}")
        
        # Step 2: Generate final enhanced brief
        print(f"\nüé® STEP 2: Generate Enhanced Photography Brief")
        print("-" * 50)
        print("üé¨ Using LLM as Creative Director to enhance the brief...")
        
        final_brief = await orchestrator.generate_final_brief(wizard_input)
        
        print("‚úÖ Successfully generated enhanced photography brief!")
        print(f"üìù Brief length: {len(final_brief.final_prompt)} characters")
        print(f"üìñ Word count: {len(final_brief.final_prompt.split())} words")
        
        # Display the final enhanced brief
        print("\n" + "=" * 80)
        print("üéØ FINAL ENHANCED PHOTOGRAPHY BRIEF - MADU AHLAN TRIGONA")
        print("=" * 80)
        print(final_brief.final_prompt)
        print("=" * 80)
        
        # Save the brief to a file
        with open("honey_enhanced_brief.txt", "w", encoding="utf-8") as f:
            f.write("PHOTOEAI ENHANCED PHOTOGRAPHY BRIEF\n")
            f.write("Product: Madu Ahlan Trigona Honey\n")
            f.write("Generated by: PhotoeAI Backend Engine\n")
            f.write("=" * 60 + "\n\n")
            f.write("ORIGINAL REQUEST:\n")
            f.write(honey_request.user_request + "\n\n")
            f.write("ENHANCED PHOTOGRAPHY BRIEF:\n")
            f.write(final_brief.final_prompt)
        
        print(f"\nüíæ Brief saved to: honey_enhanced_brief.txt")
        print("\nüéâ TEST COMPLETED SUCCESSFULLY!")
        print("   Your cinematic honey commercial photography brief is ready!")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR: {str(e)}")
        print("Make sure your Sumopod API key is valid and the services are configured correctly.")
        return False

if __name__ == "__main__":
    success = asyncio.run(test_honey_product())
    if success:
        print("\n‚ú® PhotoeAI Backend demonstrated successfully!")
        print("   The 69-field extraction and AI enhancement workflow is complete.")
    else:
        print("\nüí• Test failed. Please check your configuration.")
